buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

plugins {
  id "org.sonarqube" version "3.3"
  id 'com.github.johnrengelman.shadow' version '4.0.4'
}

allprojects {
    repositories {
        maven { url 'https://jitpack.io' }
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'jacoco'
apply plugin: 'com.github.johnrengelman.shadow'


jacoco {
  toolVersion = "0.8.4"
}

sonarqube {
  properties {
    property "sonar.projectKey", "Chocorean_authmod"
    property "sonar.organization", "chocorean-sc"
    property "sonar.host.url", "https://sonarcloud.io"
  }
}



version = "${version != 'unspecified' ? version : '1.12.2-1.0.0'}"
group = 'io.chocorean.authmod.core'
archivesBaseName = 'authmod'

sourceCompatibility = targetCompatibility = "1.8"

compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

minecraft {
    version = "1.12.2-14.23.4.2705"
    runDir = "run"
    mappings = "snapshot_20171003"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
  shadow
  compile.extendsFrom shadow
}

dependencies {
    shadow 'com.github.chocorean:authmod-core:0.1.0'
    shadow group: 'org.mindrot', name: 'jbcrypt', version: '0.4'
    shadow group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.7.3'
    shadow group: 'org.xerial', name: 'sqlite-jdbc', version: '3.25.2'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.24.0'
    testCompile('org.junit.jupiter:junit-jupiter-api:5.3.2')
    testCompile('org.junit.jupiter:junit-jupiter-params:5.3.2')
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.3.2')
}

jar {
  manifest {
    attributes([
      "Specification-Title": "authmod",
      "Specification-Vendor": "Chocorean",
      "Specification-Version": "1", // We are version 1 of ourselves
      "Implementation-Title": project.name,
      "Implementation-Version": "${project.version}",
      "Implementation-Vendor" :"Chocorean",
      "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
  }
}

shadowJar {
  classifier ''
  configurations = [project.configurations.shadow]
}

reobf {
  shadowJar {}
}

jar.finalizedBy('reobfJar')

artifacts {
  archives shadowJar
}


task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}


processResources {
  inputs.property 'version', project.version
  from(sourceSets.main.resources.srcDirs) {
    include 'META-INF/mods.toml'
    expand 'version':project.version
  }
  from(sourceSets.main.resources.srcDirs) {
    exclude 'META-INF/mods.toml'
  }
}

test {
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed", "standardOut", "standardError"
  }
}

jacocoTestReport {
  reports {
    html.enabled = true
    xml.enabled true
  }
}

check.dependsOn jacocoTestReport
