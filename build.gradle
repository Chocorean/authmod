buildscript {
  repositories {
    maven { url = 'https://maven.minecraftforge.net' }
    mavenCentral()
  }
  dependencies {
    classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
  }
}

plugins {
  id "org.sonarqube" version "3.3"
  id 'com.github.johnrengelman.shadow' version '6.1.0'
}

repositories {
  maven { url 'https://jitpack.io' }
}

sonarqube {
  properties {
    property "sonar.projectKey", "Chocorean_authmod"
    property "sonar.organization", "chocorean-sc"
    property "sonar.host.url", "https://sonarcloud.io"
  }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'com.github.johnrengelman.shadow'


version = "${version != 'unspecified' ? version : '1.16.5-1.0.0'}"
group = 'io.chocorean.authmod'
archivesBaseName = 'authmod'

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.


println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
  // The mappings can be changed at any time, and must be in the following format.
  // Channel:   Version:
  // snapshot   YYYYMMDD   Snapshot are built nightly.
  // stable     #          Stables are built at the discretion of the MCP team.
  // official   MCVersion  Official field/method names from Mojang mapping files
  //
  // You must be aware of the Mojang license when using the 'official' mappings.
  // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
  //
  // Use non-default mappings at your own risk. they may not always work.
  // Simply re-run your setup task after changing the mappings to update your workspace.
  mappings channel: 'official', version: '1.16.5'
  // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

  // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

  // Default run configurations.
  // These can be tweaked, removed, or duplicated as needed.
  runs {
    client {
      workingDirectory project.file('run')

      // Recommended logging data for a userdev environment
      // The markers can be changed as needed.
      // "SCAN": For mods scan.
      // "REGISTRIES": For firing of registry events.
      // "REGISTRYDUMP": For getting the contents of all registries.
      property 'forge.logging.markers', 'REGISTRIES'

      // Recommended logging level for the console
      // You can set various levels here.
      // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
      property 'forge.logging.console.level', 'debug'

      mods {
        examplemod {
          source sourceSets.main
        }
      }
    }

    server {
      workingDirectory project.file('run')

      // Recommended logging data for a userdev environment
      // The markers can be changed as needed.
      // "SCAN": For mods scan.
      // "REGISTRIES": For firing of registry events.
      // "REGISTRYDUMP": For getting the contents of all registries.
      property 'forge.logging.markers', 'REGISTRIES'

      // Recommended logging level for the console
      // You can set various levels here.
      // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
      property 'forge.logging.console.level', 'debug'

      mods {
        examplemod {
          source sourceSets.main
        }
      }
    }

    data {
      workingDirectory project.file('run')

      // Recommended logging data for a userdev environment
      // The markers can be changed as needed.
      // "SCAN": For mods scan.
      // "REGISTRIES": For firing of registry events.
      // "REGISTRYDUMP": For getting the contents of all registries.
      property 'forge.logging.markers', 'REGISTRIES'

      // Recommended logging level for the console
      // You can set various levels here.
      // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
      property 'forge.logging.console.level', 'debug'

      // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
      args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

      mods {
        examplemod {
          source sourceSets.main
        }
      }
    }
  }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
  shadow
  compile.extendsFrom shadow
}

dependencies {
  minecraft 'net.minecraftforge:forge:1.16.5-36.1.32'
  shadow 'com.github.chocorean:authmod-core:v0.1.0'
  shadow group: 'org.mindrot', name: 'jbcrypt', version: '0.4'
  shadow group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.7.3'
  testCompile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.36.0'
  testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.11.2'
  testImplementation('org.junit.jupiter:junit-jupiter-api:5.7.2')
  testImplementation('org.junit.jupiter:junit-jupiter-params:5.7.2')
  testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.7.2')

  // You may put jars on which you depend on in ./libs or you may define them like so..
  // compile "some.group:artifact:version:classifier"
  // compile "some.group:artifact:version"

  // Real examples
  // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
  // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

  // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
  // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

  // These dependencies get remapped to your current MCP mappings
  // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

  // For more info...
  // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
  // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
  manifest {
    attributes([
      "Specification-Title": "authmod",
      "Specification-Vendor": "Chocorean",
      "Specification-Version": "1", // We are version 1 of ourselves
      "Implementation-Title": project.name,
      "Implementation-Version": "${project.version}",
      "Implementation-Vendor" :"Chocorean",
      "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
  }
}

shadowJar {
  classifier ''
  configurations = [project.configurations.shadow]
}

reobf {
  shadowJar {}
}

jar.finalizedBy('reobfJar')

artifacts {
  archives shadowJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifact jar
    }
  }
  repositories {
    maven {
      url "file:///${project.projectDir}/mcmodsrepo"
    }
  }
}



task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}


processResources {
  inputs.property 'version', project.version
  from(sourceSets.main.resources.srcDirs) {
    include 'META-INF/mods.toml'
    expand 'version':project.version
  }
  from(sourceSets.main.resources.srcDirs) {
    exclude 'META-INF/mods.toml'
  }
}


test {
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed", "standardOut", "standardError"
  }
}

jacocoTestReport {
  reports {
    html.enabled = true
    xml.enabled true
  }
}

check.dependsOn jacocoTestReport
